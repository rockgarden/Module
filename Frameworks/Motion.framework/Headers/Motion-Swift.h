// Generated by Apple Swift version 3.0.2 (swiftlang-800.0.63 clang-800.0.42.1)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import QuartzCore;
@import ObjectiveC;
@import Foundation;
@import CoreFoundation;
@import UIKit;
@import CoreGraphics;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"

@interface CABasicAnimation (SWIFT_EXTENSION(Motion))
@end


@interface CALayer (SWIFT_EXTENSION(Motion)) <CAAnimationDelegate>
@end

@class CAAnimation;

@interface CALayer (SWIFT_EXTENSION(Motion))
/**
  A function that accepts CAAnimation objects and executes them on the
  viewâ€™s backing layer.
  \param animation A CAAnimation instance.

*/
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
- (void)animationDidStart:(CAAnimation * _Nonnull)anim;
/**
  A delegation function that is executed when the backing layer stops
  running an animation.
  \param animation The CAAnimation instance that stopped running.

  \param flag A boolean that indicates if the animation stopped
  because it was completed or interrupted. True if completed, false
  if interrupted.

*/
- (void)animationDidStop:(CAAnimation * _Nonnull)anim finished:(BOOL)flag;
@end

@class UIView;
@class UIViewController;
@protocol UIViewControllerContextTransitioning;
enum MotionAnimationTimingFunction : NSInteger;

SWIFT_CLASS("_TtC6Motion6Motion")
@interface Motion : NSObject
/**
  A boolean indicating whether Motion is presenting a view controller.
*/
@property (nonatomic, readonly) BOOL isPresenting;
/**
  A boolean indicating whether the view controller is a container.
*/
@property (nonatomic, readonly) BOOL isContainer;
/**
  A reference to the transition snapshot.
*/
@property (nonatomic, strong) UIView * _Null_unspecified transitionSnapshot;
/**
  A reference to the transition background view.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull transitionBackgroundView;
/**
  A reference to the view controller that is being transitioned to.
*/
@property (nonatomic, readonly, strong) UIViewController * _Nonnull toViewController;
/**
  A reference to the view controller that is being transitioned from.
*/
@property (nonatomic, readonly, strong) UIViewController * _Nonnull fromViewController;
/**
  The transition context for the current transition.
*/
@property (nonatomic, strong) id <UIViewControllerContextTransitioning> _Null_unspecified transitionContext;
/**
  The transition delay time.
*/
@property (nonatomic) NSTimeInterval delay;
/**
  The transition duration time.
*/
@property (nonatomic) NSTimeInterval duration;
/**
  The transition container view.
*/
@property (nonatomic, strong) UIView * _Null_unspecified containerView;
/**
  The view that is used to animate the transitions between view controllers.
*/
@property (nonatomic, strong) UIView * _Nonnull transitionView;
/**
  The view that is being transitioned to.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull toView;
/**
  The subviews of the view being transitioned to.
*/
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull toSubviews;
/**
  The view that is being transitioned from.
*/
@property (nonatomic, readonly, strong) UIView * _Nonnull fromView;
/**
  The subviews of the view being transitioned from.
*/
@property (nonatomic, readonly, copy) NSArray<UIView *> * _Nonnull fromSubviews;
/**
  The default initializer.
*/
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/**
  An initializer to modify the presenting and container state.
  \param isPresenting A boolean value indicating if the
  Motion instance is presenting the view controller.

  \param isContainer A boolean value indicating if the
  Motion instance is a container view controller.

*/
- (nonnull instancetype)initWithIsPresenting:(BOOL)isPresenting isContainer:(BOOL)isContainer OBJC_DESIGNATED_INITIALIZER;
/**
  Executes a block of code after a time delay.
  \param duration An animation duration time.

  \param animations An animation block.

  \param execute block A completion block that is executed once
  the animations have completed.

*/
+ (void (^ _Nullable)(BOOL))delay:(NSTimeInterval)time execute:(void (^ _Nonnull)(void))block;
/**
  Cancels the delayed MotionDelayCancelBlock.
  \param delayed completion An MotionDelayCancelBlock.

*/
+ (void)cancelWithDelayed:(SWIFT_NOESCAPE void (^ _Nonnull)(BOOL))completion;
/**
  Disables the default animations set on CALayers.
  \param animations A callback that wraps the animations to disable.

*/
+ (void)disable:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations;
/**
  Runs an animation with a specified duration.
  \param duration An animation duration time.

  \param animations An animation block.

  \param timingFunction An MotionAnimationTimingFunction value.

  \param completion A completion block that is executed once
  the animations have completed.

*/
+ (void)animateWithDuration:(CFTimeInterval)duration timingFunction:(enum MotionAnimationTimingFunction)timingFunction animations:(SWIFT_NOESCAPE void (^ _Nonnull)(void))animations completion:(void (^ _Nullable)(void))completion;
@end

@class CAAnimationGroup;

@interface Motion (SWIFT_EXTENSION(Motion))
/**
  Creates a CAAnimationGroup.
  \param animations An Array of CAAnimation objects.

  \param timingFunction An MotionAnimationTimingFunction value.

  \param duration An animation duration time for the group.


  returns:
  A CAAnimationGroup.
*/
+ (CAAnimationGroup * _Nonnull)animateWithGroup:(NSArray<CAAnimation *> * _Nonnull)animations timingFunction:(enum MotionAnimationTimingFunction)timingFunction duration:(CFTimeInterval)duration;
@end


@interface Motion (SWIFT_EXTENSION(Motion))
@end


@interface Motion (SWIFT_EXTENSION(Motion)) <UIViewControllerAnimatedTransitioning>
/**
  The animation method that is used to coordinate the transition.
  \param using transitionContext A UIViewControllerContextTransitioning.

*/
- (void)animateTransition:(id <UIViewControllerContextTransitioning> _Nonnull)transitionContext;
/**
  Returns the transition duration time interval.
  \param using transitionContext An optional UIViewControllerContextTransitioning.


  returns:
  A TimeInterval that is the total animation time including delays.
*/
- (NSTimeInterval)transitionDuration:(id <UIViewControllerContextTransitioning> _Nullable)transitionContext;
@end


@interface Motion (SWIFT_EXTENSION(Motion))
@end


@interface Motion (SWIFT_EXTENSION(Motion))
@end


@interface Motion (SWIFT_EXTENSION(Motion))
@end

@class UIColor;

@interface Motion (SWIFT_EXTENSION(Motion))
/**
  Creates a CABasicAnimation for the backgroundColor key path.
  \param color A UIColor.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)backgroundWithColor:(UIColor * _Nonnull)color;
/**
  Creates a CABasicAnimation for the barTintColor key path.
  \param color A UIColor.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)barTintWithColor:(UIColor * _Nonnull)color;
/**
  Creates a CABasicAnimation for the cornerRadius key path.
  \param radius A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)cornerWithRadius:(CGFloat)radius;
/**
  Creates a CABasicAnimation for the transform key path.
  \param transform A CATransform3D object.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)transformWithTransform:(CATransform3D)transform;
/**
  Creates a CABasicAnimation for the transform.rotation key path.
  \param angle An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)rotationWithAngle:(CGFloat)angle;
/**
  Creates a CABasicAnimation for the transform.rotation.x key path.
  \param angle An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)rotationXWithAngle:(CGFloat)angle;
/**
  Creates a CABasicAnimation for the transform.rotation.y key path.
  \param angle An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)rotationYWithAngle:(CGFloat)angle;
/**
  Creates a CABasicAnimation for the transform.rotation.z key path.
  \param angle An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)rotationZWithAngle:(CGFloat)angle;
/**
  Creates a CABasicAnimation for the transform.rotation key path.
  \param rotations An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)spinWithRotations:(CGFloat)rotations;
/**
  Creates a CABasicAnimation for the transform.rotation.x key path.
  \param rotations An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)spinXWithRotations:(CGFloat)rotations;
/**
  Creates a CABasicAnimation for the transform.rotation.y key path.
  \param rotations An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)spinYWithRotations:(CGFloat)rotations;
/**
  Creates a CABasicAnimation for the transform.rotation.z key path.
  \param rotations An optional CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)spinZWithRotations:(CGFloat)rotations;
/**
  Creates a CABasicAnimation for the transform.scale key path.
  \param to scale A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)scaleTo:(CGFloat)scale;
/**
  Creates a CABasicAnimation for the transform.scale.x key path.
  \param to scale A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)scaleXTo:(CGFloat)scale;
/**
  Creates a CABasicAnimation for the transform.scale.y key path.
  \param to scale A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)scaleYTo:(CGFloat)scale;
/**
  Creates a CABasicAnimation for the transform.scale.z key path.
  \param to scale A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)scaleZTo:(CGFloat)scale;
/**
  Creates a CABasicAnimation for the transform.translation key path.
  \param point A CGPoint.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)translateTo:(CGPoint)point;
/**
  Creates a CABasicAnimation for the transform.translation.x key path.
  \param to translation A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)translateXTo:(CGFloat)translation;
/**
  Creates a CABasicAnimation for the transform.translation.y key path.
  \param to translation A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)translateYTo:(CGFloat)translation;
/**
  Creates a CABasicAnimation for the transform.translation.z key path.
  \param to translation A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)translateZTo:(CGFloat)translation;
/**
  Creates a CABasicAnimation for the position key path.
  \param x A CGFloat.

  \param y A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)positionWithX:(CGFloat)x y:(CGFloat)y;
/**
  Creates a CABasicAnimation for the position key path.
  \param to point A CGPoint.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)positionTo:(CGPoint)point;
/**
  Creates a CABasicAnimation for the opacity key path.
  \param opacity A Double.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)fadeWithOpacity:(double)opacity;
/**
  Creates a CABasicaAnimation for the zPosition key path.
  \param index An Int.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)zPositionWithIndex:(NSInteger)index;
/**
  Creates a CABasicaAnimation for the width key path.
  \param width A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)width:(CGFloat)width;
/**
  Creates a CABasicaAnimation for the height key path.
  \param height A CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)height:(CGFloat)height;
/**
  Creates a CABasicaAnimation for the height key path.
  \param size A CGSize.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)size:(CGSize)size;
/**
  Creates a CABasicAnimation for the shadowPath key path.
  \param path A CGPath.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)shadowWithPath:(CGPathRef _Nonnull)path;
/**
  Creates a CABasicAnimation for the shadowOffset key path.
  \param offset CGSize.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)shadowWithOffset:(CGSize)offset;
/**
  Creates a CABasicAnimation for the shadowOpacity key path.
  \param opacity Float.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)shadowWithOpacity:(float)opacity;
/**
  Creates a CABasicAnimation for the shadowRadius key path.
  \param radius CGFloat.


  returns:
  A CABasicAnimation.
*/
+ (CABasicAnimation * _Nonnull)shadowWithRadius:(CGFloat)radius;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationFillMode, "MotionAnimationFillMode") {
  MotionAnimationFillModeForwards = 0,
  MotionAnimationFillModeBackwards = 1,
  MotionAnimationFillModeBoth = 2,
  MotionAnimationFillModeRemoved = 3,
};

typedef SWIFT_ENUM_NAMED(NSInteger, MotionAnimationTimingFunction, "MotionAnimationTimingFunction") {
  MotionAnimationTimingFunctionDefault = 0,
  MotionAnimationTimingFunctionLinear = 1,
  MotionAnimationTimingFunctionEaseIn = 2,
  MotionAnimationTimingFunctionEaseOut = 3,
  MotionAnimationTimingFunctionEaseInEaseOut = 4,
};


SWIFT_PROTOCOL_NAMED("MotionDelegate")
@protocol MotionDelegate
@optional
- (void)motionWithMotion:(Motion * _Nonnull)motion willTransition:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView;
- (void)motionWithMotion:(Motion * _Nonnull)motion didTransition:(UIView * _Nonnull)fromView toView:(UIView * _Nonnull)toView;
- (NSTimeInterval)motionDelayTransitionByTimeIntervalWithMotion:(Motion * _Nonnull)motion;
@end


SWIFT_CLASS("_TtC6Motion28MotionPresentationController")
@interface MotionPresentationController : UIPresentationController
- (void)presentationTransitionWillBegin;
- (void)presentationTransitionDidEnd:(BOOL)completed;
- (void)dismissalTransitionWillBegin;
- (void)dismissalTransitionDidEnd:(BOOL)completed;
@property (nonatomic, readonly) CGRect frameOfPresentedViewInContainerView;
- (nonnull instancetype)initWithPresentedViewController:(UIViewController * _Nonnull)presentedViewController presentingViewController:(UIViewController * _Nullable)presentingViewController OBJC_DESIGNATED_INITIALIZER;
@end


@interface UIView (SWIFT_EXTENSION(Motion))
/**
  Snapshots the view instance for animations during transitions.
  \param afterUpdates A boolean indicating whether to snapshot the view
  after a render update, or as is.

  \param shouldHide A boolean indicating whether the view should be hidden
  after the snapshot is taken.


  returns:
  A UIView instance that is a snapshot of the given UIView.
*/
- (UIView * _Nonnull)transitionSnapshotAfterUpdates:(BOOL)afterUpdates shouldHide:(BOOL)shouldHide;
@end


@interface UIView (SWIFT_EXTENSION(Motion))
/**
  An identifier value used to connect views across UIViewControllers.
*/
@property (nonatomic, copy) NSString * _Nonnull motionIdentifier;
@end


@interface UIView (SWIFT_EXTENSION(Motion))
/**
  Computes the rotation of the view.
*/
@property (nonatomic) CGFloat motionRotationAngle;
/**
  The global position of a view.
*/
@property (nonatomic, readonly) CGPoint motionPosition;
/**
  The layer.transform of a view.
*/
@property (nonatomic) CATransform3D motionTransform;
/**
  Computes the scale X axis value of the view.
*/
@property (nonatomic, readonly) CGFloat motionScaleX;
/**
  Computes the scale Y axis value of the view.
*/
@property (nonatomic, readonly) CGFloat motionScaleY;
/**
  A function that accepts an Array of CAAnimation objects and executes
  them on the viewâ€™s backing layer.
  \param animations An Array of CAAnimations.

*/
- (void)animate:(NSArray<CAAnimation *> * _Nonnull)animations;
@end


@interface UIViewController (SWIFT_EXTENSION(Motion))
/**
  Determines whether to use a Motion instance for transitions.
  \param forPresented presented A UIViewController.

  \param presenting A UIViewController.

  \param source A UIViewController.


  returns:
  An optional UIViewControllerAnimatedTransitioning.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForPresentedController:(UIViewController * _Nonnull)presented presentingController:(UIViewController * _Nonnull)presenting sourceController:(UIViewController * _Nonnull)source;
/**
  Determines whether to use a Motion instance for transitions.
  \param forDismissed dismissed A UIViewController.


  returns:
  An optional UIViewControllerAnimatedTransitioning.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)animationControllerForDismissedController:(UIViewController * _Nonnull)dismissed;
/**
  Determines whether to use a MotionPresentationController for transitions.
  \param forPresented presented A UIViewController.

  \param presenting A UIViewController.

  \param source A UIViewController.


  returns:
  An optional UIPresentationController.
*/
- (UIPresentationController * _Nullable)presentationControllerForPresentedViewController:(UIViewController * _Nonnull)presented presentingViewController:(UIViewController * _Nullable)presenting sourceViewController:(UIViewController * _Nonnull)source;
@end

@class UINavigationController;
@class UITabBarController;

@interface UIViewController (SWIFT_EXTENSION(Motion)) <MotionDelegate, UIViewControllerTransitioningDelegate, UINavigationControllerDelegate, UITabBarControllerDelegate>
/**
  A boolean that indicates whether motion is enabled.
*/
@property (nonatomic) BOOL isMotionEnabled;
/**
  A reference to the MotionDelegate.
*/
@property (nonatomic, weak) id <MotionDelegate> _Nullable motionDelegate;
/**
  Determines whether to use a Motion instance for transitions.
  <ul>
    <li>
      _ navigationController: A UINavigationController.
    </li>
  </ul>
  \param animationControllerFor operation A UINavigationControllerOperation.

  \param from fromVC A UIViewController that is being transitioned from.

  \param to toVC A UIViewController that is being transitioned to.


  returns:
  An optional UIViewControllerAnimatedTransitioning.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)navigationController:(UINavigationController * _Nonnull)navigationController animationControllerForOperation:(UINavigationControllerOperation)operation fromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC;
/**
  Determines whether to use a Motion instance for transitions.
  <ul>
    <li>
      _ tabBarController: A UITabBarController.
    </li>
  </ul>
  \param animationControllerForTransitionFrom fromVC A UIViewController that is being transitioned from.

  \param to toVC A UIViewController that is being transitioned to.


  returns:
  An optional UIViewControllerAnimatedTransitioning.
*/
- (id <UIViewControllerAnimatedTransitioning> _Nullable)tabBarController:(UITabBarController * _Nonnull)tabBarController animationControllerForTransitionFromViewController:(UIViewController * _Nonnull)fromVC toViewController:(UIViewController * _Nonnull)toVC;
@end

#pragma clang diagnostic pop
